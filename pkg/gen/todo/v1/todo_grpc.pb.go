// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: todo/v1/todo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TodoSVC_GetTodos_FullMethodName   = "/TodoSVC/GetTodos"
	TodoSVC_GetTodo_FullMethodName    = "/TodoSVC/GetTodo"
	TodoSVC_CreateTodo_FullMethodName = "/TodoSVC/CreateTodo"
	TodoSVC_UpdateTodo_FullMethodName = "/TodoSVC/UpdateTodo"
	TodoSVC_DeleteTodo_FullMethodName = "/TodoSVC/DeleteTodo"
)

// TodoSVCClient is the client API for TodoSVC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoSVCClient interface {
	GetTodos(ctx context.Context, in *GetTodosInput, opts ...grpc.CallOption) (*GetTodosOutput, error)
	GetTodo(ctx context.Context, in *GetTodoInput, opts ...grpc.CallOption) (*GetTodoOutput, error)
	CreateTodo(ctx context.Context, in *CreateTodoInput, opts ...grpc.CallOption) (*CreateTodoOutput, error)
	UpdateTodo(ctx context.Context, in *UpdateTodoInput, opts ...grpc.CallOption) (*UpdateTodoOutput, error)
	DeleteTodo(ctx context.Context, in *DeleteTodoInput, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type todoSVCClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoSVCClient(cc grpc.ClientConnInterface) TodoSVCClient {
	return &todoSVCClient{cc}
}

func (c *todoSVCClient) GetTodos(ctx context.Context, in *GetTodosInput, opts ...grpc.CallOption) (*GetTodosOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTodosOutput)
	err := c.cc.Invoke(ctx, TodoSVC_GetTodos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSVCClient) GetTodo(ctx context.Context, in *GetTodoInput, opts ...grpc.CallOption) (*GetTodoOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTodoOutput)
	err := c.cc.Invoke(ctx, TodoSVC_GetTodo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSVCClient) CreateTodo(ctx context.Context, in *CreateTodoInput, opts ...grpc.CallOption) (*CreateTodoOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTodoOutput)
	err := c.cc.Invoke(ctx, TodoSVC_CreateTodo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSVCClient) UpdateTodo(ctx context.Context, in *UpdateTodoInput, opts ...grpc.CallOption) (*UpdateTodoOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTodoOutput)
	err := c.cc.Invoke(ctx, TodoSVC_UpdateTodo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoSVCClient) DeleteTodo(ctx context.Context, in *DeleteTodoInput, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TodoSVC_DeleteTodo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoSVCServer is the server API for TodoSVC service.
// All implementations must embed UnimplementedTodoSVCServer
// for forward compatibility.
type TodoSVCServer interface {
	GetTodos(context.Context, *GetTodosInput) (*GetTodosOutput, error)
	GetTodo(context.Context, *GetTodoInput) (*GetTodoOutput, error)
	CreateTodo(context.Context, *CreateTodoInput) (*CreateTodoOutput, error)
	UpdateTodo(context.Context, *UpdateTodoInput) (*UpdateTodoOutput, error)
	DeleteTodo(context.Context, *DeleteTodoInput) (*emptypb.Empty, error)
	mustEmbedUnimplementedTodoSVCServer()
}

// UnimplementedTodoSVCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTodoSVCServer struct{}

func (UnimplementedTodoSVCServer) GetTodos(context.Context, *GetTodosInput) (*GetTodosOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodos not implemented")
}
func (UnimplementedTodoSVCServer) GetTodo(context.Context, *GetTodoInput) (*GetTodoOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodo not implemented")
}
func (UnimplementedTodoSVCServer) CreateTodo(context.Context, *CreateTodoInput) (*CreateTodoOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (UnimplementedTodoSVCServer) UpdateTodo(context.Context, *UpdateTodoInput) (*UpdateTodoOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodo not implemented")
}
func (UnimplementedTodoSVCServer) DeleteTodo(context.Context, *DeleteTodoInput) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (UnimplementedTodoSVCServer) mustEmbedUnimplementedTodoSVCServer() {}
func (UnimplementedTodoSVCServer) testEmbeddedByValue()                 {}

// UnsafeTodoSVCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoSVCServer will
// result in compilation errors.
type UnsafeTodoSVCServer interface {
	mustEmbedUnimplementedTodoSVCServer()
}

func RegisterTodoSVCServer(s grpc.ServiceRegistrar, srv TodoSVCServer) {
	// If the following call pancis, it indicates UnimplementedTodoSVCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TodoSVC_ServiceDesc, srv)
}

func _TodoSVC_GetTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodosInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSVCServer).GetTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoSVC_GetTodos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSVCServer).GetTodos(ctx, req.(*GetTodosInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSVC_GetTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSVCServer).GetTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoSVC_GetTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSVCServer).GetTodo(ctx, req.(*GetTodoInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSVC_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSVCServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoSVC_CreateTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSVCServer).CreateTodo(ctx, req.(*CreateTodoInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSVC_UpdateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSVCServer).UpdateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoSVC_UpdateTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSVCServer).UpdateTodo(ctx, req.(*UpdateTodoInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoSVC_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoSVCServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoSVC_DeleteTodo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoSVCServer).DeleteTodo(ctx, req.(*DeleteTodoInput))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoSVC_ServiceDesc is the grpc.ServiceDesc for TodoSVC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoSVC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TodoSVC",
	HandlerType: (*TodoSVCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTodos",
			Handler:    _TodoSVC_GetTodos_Handler,
		},
		{
			MethodName: "GetTodo",
			Handler:    _TodoSVC_GetTodo_Handler,
		},
		{
			MethodName: "CreateTodo",
			Handler:    _TodoSVC_CreateTodo_Handler,
		},
		{
			MethodName: "UpdateTodo",
			Handler:    _TodoSVC_UpdateTodo_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _TodoSVC_DeleteTodo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todo/v1/todo.proto",
}
